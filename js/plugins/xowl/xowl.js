// Generated by CoffeeScript 1.8.0

/*
@author Ximdex <dev@ximdex.com>
 */
var currentSelectedSuggestion, selectedTextAnnotation, suggestions_field;

window.ceditor = null;

selectedTextAnnotation = null;

currentSelectedSuggestion = null;

suggestions_field = jQuery('#suggestions_field');

(function($) {
  var fillSuggestionsField, icon, openXowlDialog, prepareContent, processSemanticAnnotations, removeSuggestion, replaceXowlAnnotations;
  CKEDITOR.config.allowedContent = true;
  if (drupalSettings.xowl !== void 0) {
    icon = "" + drupalSettings.xowl.basedir + "/js/plugins/xowl/icons/xowl_enhance_plugin_button.png";
  } else {
    icon = 'abbr';
  }
  CKEDITOR.plugins.add('xowl', {
    icons: icon,
    init: function(editor) {
      window.parent.editor = editor;
      if (drupalSettings.xowl === void 0) {
        return;
      }
      if (drupalSettings.xowl.enable_xowl === void 0 || drupalSettings.xowl.enable_xowl !== 1) {
        return;
      }
      if (CKEDITOR.xowl === void 0) {
        CKEDITOR.xowl = {
          entities: {},
          suggestions: {}
        };
      }
      editor.ui.addButton('xowl', {
        label: 'Xowl Enhance',
        icon: icon,
        command: 'xowl_content_enhance_command'
      });
      editor.addCommand('xowl_content_enhance_command', {
        exec: function() {
          var $loader, content;
          content = editor.getData();
          content = prepareContent(content);
          $loader = $("<div/>", {
            "class": 'loader'
          });
          $("<img/>").attr('src', drupalSettings.xowl.basedir + '/js/plugins/xowl/icons/loader.gif').appendTo($loader);
          $.ajax({
            type: 'POST',
            dataType: "json",
            url: drupalSettings.xowl.url,
            async: false,
            data: {
              content: content
            }
          }).done(function(data) {
            var result;
            $loader.remove();
            if (data) {
              result = data;
              CKEDITOR.xowl['lastResponse'] = result;
              editor.setData('', function(arg) {
                this.insertHtml(replaceXowlAnnotations(result));
                fillSuggestionsField();
              });
            }
          }).fail(function(jqXHR, textStatus, errorThrown) {
            $loader.remove();
            alert("Error retrieving content from XOwl");
          });
        }
      }, CKEDITOR.dialog.add('xowl_dialog', function(api) {
        var dialogDefinition;
        dialogDefinition = {
          title: 'Select Entity Dialog',
          minWidth: 390,
          minHeight: 130,
          contents: [
            {
              id: 'tab_entities',
              label: 'Select Entity',
              title: 'Select Entity',
              expand: true,
              padding: 0,
              elements: [
                {
                  type: 'select',
                  id: 'xowl_entities',
                  label: 'Select Entities',
                  items: [],
                  onChange: function(e) {
                    CKEDITOR.xowl.suggestions[selectedTextAnnotation] = this.getValue();
                  }
                }
              ]
            }
          ],
          buttons: [
            CKEDITOR.dialog.okButton, CKEDITOR.dialog.cancelButton, {
              type: 'button',
              id: 'removeSuggestion',
              label: 'Eliminar ',
              title: 'Eliminar',
              onClick: function() {
                removeSuggestion(editor);
                this.getDialog().hide();
              }
            }
          ],
          onOk: function() {
            var selectedEntityType, selectedEntityUri;
            selectedEntityUri = CKEDITOR.xowl.suggestions[selectedTextAnnotation];
            selectedEntityType = CKEDITOR.xowl.tempTypes[selectedEntityUri];
            $(this.getParentEditor().window.getFrame().$).contents().find("[data-cke-annotation=\"" + selectedTextAnnotation + "\"]").attr({
              "href": CKEDITOR.xowl.suggestions[selectedTextAnnotation],
              "data-cke-saved-href": CKEDITOR.xowl.suggestions[selectedTextAnnotation],
              "data-cke-type": selectedEntityType
            });
            $(this.getParentEditor().window.getFrame().$).contents().find("[data-cke-annotation=\"" + selectedTextAnnotation + "\"]").removeAttr("data-cke-suggestions");
            fillSuggestionsField();
          },
          onCancel: function() {
            CKEDITOR.xowl.suggestions[selectedTextAnnotation] = currentSelectedSuggestion;
          },
          onShow: function() {
            var dialogTabSelect, entities;
            dialogTabSelect = this.getContentElement('tab_entities', 'xowl_entities');
            entities = CKEDITOR.xowl.entities[selectedTextAnnotation];
            CKEDITOR.xowl.tempTypes = {};
            dialogTabSelect.clear();
            entities.forEach(function(entity) {
              dialogTabSelect.add(entity.label + " (" + entity.uri + ")", entity.uri);
              CKEDITOR.xowl.tempTypes[entity.uri] = entity.type;
            });
            dialogTabSelect.setValue(CKEDITOR.xowl.suggestions[selectedTextAnnotation]);
            currentSelectedSuggestion = CKEDITOR.xowl.suggestions[selectedTextAnnotation];
          }
        };
        editor.on('contentDom', function(e) {
          $(editor.document.$).unbind('keyup').bind('keyup', function(evt) {
            if (evt.keyCode === 8 || evt.keyCode === 46) {
              evt.stopPropagation();
              $(editor.document.$).find("[data-cke-annotation]").each(function(i, element) {
                var $el;
                $el = $(element);
                if ($el.html() !== $el.attr("data-cke-annotation")) {
                  delete CKEDITOR.xowl.suggestions[$el.attr("data-cke-annotation")];
                  $el.replaceWith($el.html());
                }
              });
              fillSuggestionsField();
            }
          });
          $(editor.document.$).find('.xowl-suggestion').unbind('click').bind('click', function() {
            selectedTextAnnotation = $(this).data('cke-annotation');
            openXowlDialog(e.editor);
          });
        });
        editor.on('change', function(e) {
          $(e.editor.window.getFrame().$).contents().find('.xowl-suggestion').unbind('click').bind('click', function() {
            selectedTextAnnotation = $(this).data('cke-annotation');
            openXowlDialog(e.editor);
          });
        });
        return dialogDefinition;
      }));
    }
  });

  /*
  <p>Cleans the content, removing the links put by the plugin</p>
  <p>Adds some marks to let Xowl enhance html content successfully</p>
  @param content String The content to be prepared
  @returns String The prepared content
   */
  prepareContent = function(content) {
    return content;
  };

  /* 
  <p>Function to replace text annotation mentions by the entity annotation URI</p>
  @param result object result Containing the text, Text Annotations (with positions) and Entity Annotations
  @returns The text with the found mentions replaced
   */
  replaceXowlAnnotations = function(result) {
    var text;
    text = result.text;
    CKEDITOR.xowl.suggestions = {};
    CKEDITOR.xowl.entities = {};
    if (result.semantic) {
      text = processSemanticAnnotations(text, result.semantic);
    }
    return text;
  };
  removeSuggestion = function(editor) {
    $(editor.window.getFrame().$).contents().find("[data-cke-annotation=\"" + selectedTextAnnotation + "\"]").replaceWith(selectedTextAnnotation);
    delete CKEDITOR.xowl.suggestions[selectedTextAnnotation];
  };
  openXowlDialog = function(editor) {
    if (!CKEDITOR.xowl || !CKEDITOR.xowl.entities) {
      return;
    }
    editor.openDialog('xowl_dialog');
  };
  fillSuggestionsField = function() {
    suggestions_field.val(JSON.stringify(CKEDITOR.xowl.suggestions));
  };
  processSemanticAnnotations = function(text, annotations) {
    var entity, mention, numSuggestions, textAnnotation, _i, _len;
    for (_i = 0, _len = annotations.length; _i < _len; _i++) {
      textAnnotation = annotations[_i];
      mention = textAnnotation['selected-text'];
      entity = textAnnotation.entities[0];
      numSuggestions = textAnnotation.entities.length;
      CKEDITOR.xowl.suggestions[mention] = entity.uri;
      CKEDITOR.xowl.entities[mention] = textAnnotation.entities;
    }
    return text;
  };
})(jQuery);
